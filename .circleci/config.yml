---
version: 2.1
defaults:
  - &default
    docker:
      - image: circleci/node:13.8.0
  - &default-python
    docker:
      - image: circleci/python

commands:
  destroy-environment:
    description: |
      Destroy back-end and front-end cloudformation stacks given a workflow ID.
    environment:
    parameters:
      su:
        type: string
        default: ''
      path:
        type: string
        default: ''
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            << parameters.su >>aws cloudformation delete-stack \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --region "${AWS_DEFAULT_REGION}"
            << parameters.su >>aws cloudformation delete-stack \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --region "${AWS_DEFAULT_REGION}"
      - run:
          name: print log
          when: on_fail
          command: |
            param=<< parameters.path >>
            if [[ -z $param ]]
            then
              exit 0
            else
              cat << parameters.path >>
            fi
  install-awscli:
    description: install aws-cli
    parameters:
      su:
        type: string
        default: ''
    steps:
      - run:
          command: |
            << parameters.su >>curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            << parameters.su >>unzip awscliv2.zip
            << parameters.su >>./aws/install
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
    # Add parameter here
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration
            # associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure "https://kvdb.io/5AXh3obPU6vTJ55ohKSBv2/migration_${CIRCLE_WORKFLOW_ID:0:7}")
            if(( $SUCCESS==1 ));
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
      - run:
          name: Delete migration bucket
          when: on_fail
          command: |
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/" --recursive
jobs:
  build-frontend:
    <<: *default
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
             cd frontend
             npm install
             npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    <<: *default
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    <<: *default
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: run frontend test
          command: |
            cd frontend
            npm run test
  test-backend:
    <<: *default
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: run backend test
          command: |
            cd backend
            npm run test
  scan-frontend:
    <<: *default
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan fronted
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  scan-backend:
    <<: *default
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan

  run-migrations:
    <<: *default
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - install-awscli:
          su: "sudo "

      - run:
          name: Run migrations
          command: |
            cd backend
            sudo npm install -g npm
            npm run migrations | tee migrations_dump.txt
      - run:
          name: save migration status on KVDB
          command: |
            cd backend
            if grep -q "has been executed successfully" ~/project/backend/migrations_dump.txt || \
              grep -q "No migrations are pending" ~/project/backend/migrations_dump.txt
            then
                curl --insecure "https://kvdb.io/5AXh3obPU6vTJ55ohKSBv2/migration_${CIRCLE_WORKFLOW_ID:0:7}" -d "1"
            else
                curl --insecure "https://kvdb.io/5AXh3obPU6vTJ55ohKSBv2/migration_${CIRCLE_WORKFLOW_ID:0:7}" -d "0"
            fi
      - destroy-environment:
          path: "/home/circleci/.npm/_logs/*.log"

  deploy-frontend:
    <<: *default
    steps:
      - checkout
      - install-awscli:
          su: "sudo "
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            sudo apt install tar gzip -y
      - run:
          name: Get backend url
          command: |
            curl --insecure "https://kvdb.io/5AXh3obPU6vTJ55ohKSBv2/web-${CIRCLE_WORKFLOW_ID:0:7}" > backend_url.txt
            export BACKEND_IP=$(cat backend_url.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend service
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - destroy-environment
      - revert-migrations

  deploy-backend:
    <<: *default-python
    steps:
      - checkout
      - install-awscli:
          su: "sudo "
      - add_ssh_keys:
          fingerprints:
            - "29:1c:51:79:19:e9:8c:52:aa:16:1a:ba:28:b4:9d:28"
      - run:
          name: configure aws cli
          command: |
            touch credentials && echo "[default]" > credentials
            echo "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> credentials
            echo "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> credentials
            echo "region=$AWS_DEFAULT_REGION" >> credentials
            cat credentials
            sudo mkdir -p ~/.aws
            sudo mv credentials ~/.aws
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install tar gzip -y
            pip install ansible
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs
            sudo npm install --global n
            sudo n 13.8.0
      - run:
          name: Create Artifacts
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            sudo tar -C backend -czvf artifact.tar.gz .
      - run:
          name: move artifact into accessble location for ansible
          command: |
            sudo mkdir -p .circleci/ansible/roles/deploy/files
            sudo mv artifact.tar.gz .circleci/ansible/roles/deploy/files
            cd .circleci/ansible
            sudo curl --insecure "https://kvdb.io/5AXh3obPU6vTJ55ohKSBv2/web-${CIRCLE_WORKFLOW_ID:0:7}" >> inventory.txt
            echo "Contents of inventory.txt file is $(cat inventory.txt)"
      - run:
          name: Deploy backend
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
      - revert-migrations
      - destroy-environment:
          su: "sudo "

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum install -y gzip tar
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
            sleep 40 #wait for infrastructure to provision
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --filters Name=key-name,Values=refidas \
              --query Reservations[*].Instances[*].PublicIpAddress \
              --output text >> instances.txt
            curl "${KVDB_BUCKET}/web-${CIRCLE_WORKFLOW_ID:0:7}" -d "$(cat instances.txt)"
            if [[ -z "$(cat instances.txt)" ]]; then exit 1; fi
            cat instances.txt >> ~/project/.circleci/ansible/inventory.txt
            cat instances.txt
            rm instances.txt
      - revert-migrations
      - destroy-environment

  configure-infrastructure:
    <<: *default-python
    steps:
      - checkout
      - install-awscli:
          su: "sudo "
      - add_ssh_keys:
          fingerprints:
            - "29:1c:51:79:19:e9:8c:52:aa:16:1a:ba:28:b4:9d:28"
      - run:
          name: Install dependencies
          command: |
            sudo apt install tar gzip -y
            sudo pip install ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            sudo curl --insecure "https://kvdb.io/5AXh3obPU6vTJ55ohKSBv2/web-${CIRCLE_WORKFLOW_ID:0:7}" >> inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          su: "sudo "

  smoke-test:
    <<: *default
    steps:
      - checkout
      - install-awscli:
          su: "sudo "

      - run:
          name: Backend smoke test.
          command: |
            curl --insecure "https://kvdb.io/4MemjaUyF51zbLJncfsSF5/web-${CIRCLE_WORKFLOW_ID:0:7}" > publicIp.txt
            export address="http://$(cat publicIp.txt):3030/api/status"
            rm publicIp.txt
            echo "Trying to access $address"
            sleep 30
            if curl $address | grep "ok"
            then
              echo "Backend Confirmed up..."
              exit 0
            else
              echo "Backend not Responding"
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - revert-migrations
      - destroy-environment

  cloudfront-update:
    <<: *default
    steps:
      - checkout
      - install-awscli:
          su: "sudo "
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - revert-migrations
      - destroy-environment

  cleanup:
    <<: *default
    steps:
      - checkout
      - install-awscli:
          su: "sudo "
      - run:
          name: Get old stack workflow id
          command: |
            # Note that the old bucket name is the OldWorkflowID
            export OldWorkflowID="udapeople-refidas"
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            export STACKS=$(for item in $(aws cloudformation list-stacks --query "StackSummaries[*].StackName"  \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text); do echo $item;done| grep -v -E "cloud9|${CIRCLE_WORKFLOW_ID:0:7}$")
            
            echo Trash Stack names: "${STACKS[@]}"
            
            export TRASH_BUCKETS=$(for bucket in $(aws s3 ls| cut -d " " -f 3); do echo $bucket; done | grep -v -E "$CIRCLE_WORKFLOW_ID|^refidas")
      - run:
          name: Remove old stacks and files
          command: |
            if [[ -z $TRASH_BUCKETS ]]
            then
              echo "----No Excess Trash Bucket----"
            else
              echo "--- Deleting Contents of Trash Buckets---"
              for bucket in "${TRASH_BUCKETS[@]}"; do aws s3 rm s3://$bucket --recursive;aws s3 rb s3://$bucket; done;
              echo "---${TRASH_BUCKETS} Deleted ---"
            fi
            
            if [[ -z $STACKS ]]
            then
              echo "----No Excess Trash CloudFormation----"
            else
              for formation in "${TRASH[@]}"
              do
                aws cloudformation delete-stack --stack-name "${formation}"
              done
            fi
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]